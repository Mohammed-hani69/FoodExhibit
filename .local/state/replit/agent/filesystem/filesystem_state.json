{"file_contents":{"app.py":{"content":"from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_socketio import SocketIO\nfrom sqlalchemy.orm import DeclarativeBase\nimport os\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\n# Initialize Flask app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1) # needed for url_for to generate with https\n\n# Database configuration  \napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    'pool_pre_ping': True,\n    \"pool_recycle\": 300,\n}\n\n# Initialize extensions\ndb = SQLAlchemy(app, model_class=Base)\nsocketio = SocketIO(app, cors_allowed_origins=\"*\")\n\n# Create tables\nwith app.app_context():\n    import models  # noqa: F401\n    db.create_all()\n    logging.info(\"Database tables created\")","size_bytes":1020},"main.py":{"content":"from app import app, socketio\nimport routes  # noqa: F401\n\nif __name__ == \"__main__\":\n    socketio.run(app, host=\"0.0.0.0\", port=5000, debug=True, allow_unsafe_werkzeug=True, use_reloader=False, log_output=True)","size_bytes":211},"models.py":{"content":"from datetime import datetime\nfrom app import db\nfrom flask_dance.consumer.storage.sqla import OAuthConsumerMixin\nfrom flask_login import UserMixin\nfrom sqlalchemy import UniqueConstraint\n\n# User model with roles for food exhibition platform\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.String, primary_key=True)\n    email = db.Column(db.String, unique=True, nullable=True)\n    first_name = db.Column(db.String, nullable=True)\n    last_name = db.Column(db.String, nullable=True)\n    profile_image_url = db.Column(db.String, nullable=True)\n    role = db.Column(db.String, default='user')  # user, exhibitor, admin\n    phone = db.Column(db.String, nullable=True)\n    company_name = db.Column(db.String, nullable=True)  # For exhibitors\n    \n    created_at = db.Column(db.DateTime, default=datetime.now)\n    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)\n    \n    # Relationships\n    favorites_exhibitors = db.relationship('FavoriteExhibitor', backref='user', lazy=True, cascade='all, delete-orphan')\n    favorites_products = db.relationship('FavoriteProduct', backref='user', lazy=True, cascade='all, delete-orphan')\n    appointments = db.relationship('Appointment', backref='user', lazy=True)\n    chat_messages = db.relationship('ChatMessage', foreign_keys='ChatMessage.user_id', backref='user', lazy=True)\n\n# OAuth model for Replit Auth\nclass OAuth(OAuthConsumerMixin, db.Model):\n    user_id = db.Column(db.String, db.ForeignKey(User.id))\n    browser_session_key = db.Column(db.String, nullable=False)\n    user = db.relationship(User)\n\n    __table_args__ = (UniqueConstraint(\n        'user_id',\n        'browser_session_key', \n        'provider',\n        name='uq_user_browser_session_key_provider',\n    ),)\n\n# Exhibitor model\nclass Exhibitor(db.Model):\n    __tablename__ = 'exhibitors'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String, db.ForeignKey('users.id'), nullable=False)\n    company_name = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    logo_url = db.Column(db.String)\n    banner_url = db.Column(db.String)\n    gallery_hall = db.Column(db.String, default='hall1')  # hall1, hall2, etc.\n    position_x = db.Column(db.Float, default=0.0)  # 3D position\n    position_y = db.Column(db.Float, default=0.0)\n    position_z = db.Column(db.Float, default=0.0)\n    ranking = db.Column(db.Integer, default=1)  # For positioning in gallery\n    website = db.Column(db.String)\n    contact_email = db.Column(db.String)\n    contact_phone = db.Column(db.String)\n    is_active = db.Column(db.Boolean, default=True)\n    \n    created_at = db.Column(db.DateTime, default=datetime.now)\n    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)\n    \n    # Relationships\n    user = db.relationship('User', backref='exhibitor_profile')\n    products = db.relationship('Product', backref='exhibitor', lazy=True, cascade='all, delete-orphan')\n    appointments = db.relationship('Appointment', backref='exhibitor', lazy=True)\n    analytics = db.relationship('ExhibitorAnalytics', backref='exhibitor', lazy=True, cascade='all, delete-orphan')\n    available_slots = db.relationship('AvailableSlot', backref='exhibitor', lazy=True, cascade='all, delete-orphan')\n\n# Product model\nclass Product(db.Model):\n    __tablename__ = 'products'\n    id = db.Column(db.Integer, primary_key=True)\n    exhibitor_id = db.Column(db.Integer, db.ForeignKey('exhibitors.id'), nullable=False)\n    name = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    price = db.Column(db.Float)\n    currency = db.Column(db.String(10), default='USD')\n    image_url = db.Column(db.String)\n    category = db.Column(db.String(100))\n    is_featured = db.Column(db.Boolean, default=False)  # Featured in gallery/homepage\n    is_homepage_featured = db.Column(db.Boolean, default=False)  # Featured on homepage\n    view_count = db.Column(db.Integer, default=0)\n    is_active = db.Column(db.Boolean, default=True)\n    \n    created_at = db.Column(db.DateTime, default=datetime.now)\n    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)\n\n# Favorite Exhibitors\nclass FavoriteExhibitor(db.Model):\n    __tablename__ = 'favorite_exhibitors'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String, db.ForeignKey('users.id'), nullable=False)\n    exhibitor_id = db.Column(db.Integer, db.ForeignKey('exhibitors.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    __table_args__ = (UniqueConstraint('user_id', 'exhibitor_id', name='uq_user_exhibitor'),)\n\n# Favorite Products\nclass FavoriteProduct(db.Model):\n    __tablename__ = 'favorite_products'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String, db.ForeignKey('users.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    # Relationships\n    product = db.relationship('Product', backref='favorites')\n    \n    __table_args__ = (UniqueConstraint('user_id', 'product_id', name='uq_user_product'),)\n\n# Chat Messages\nclass ChatMessage(db.Model):\n    __tablename__ = 'chat_messages'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String, db.ForeignKey('users.id'), nullable=False)\n    exhibitor_id = db.Column(db.Integer, db.ForeignKey('exhibitors.id'), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    is_from_exhibitor = db.Column(db.Boolean, default=False)\n    is_read = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    # Relationships\n    exhibitor = db.relationship('Exhibitor', backref='chat_messages')\n\n# Available Slots for appointments\nclass AvailableSlot(db.Model):\n    __tablename__ = 'available_slots'\n    id = db.Column(db.Integer, primary_key=True)\n    exhibitor_id = db.Column(db.Integer, db.ForeignKey('exhibitors.id'), nullable=False)\n    start_time = db.Column(db.DateTime, nullable=False)\n    end_time = db.Column(db.DateTime, nullable=False)\n    duration_minutes = db.Column(db.Integer, default=30)\n    is_available = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n\n# Appointments\nclass Appointment(db.Model):\n    __tablename__ = 'appointments'\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String, db.ForeignKey('users.id'), nullable=False)\n    exhibitor_id = db.Column(db.Integer, db.ForeignKey('exhibitors.id'), nullable=False)\n    slot_id = db.Column(db.Integer, db.ForeignKey('available_slots.id'), nullable=False)\n    appointment_date = db.Column(db.DateTime, nullable=False)\n    duration_minutes = db.Column(db.Integer, default=30)\n    status = db.Column(db.String(20), default='scheduled')  # scheduled, completed, cancelled\n    notes = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    # Relationships\n    slot = db.relationship('AvailableSlot', backref='appointments')\n\n# Analytics for exhibitors\nclass ExhibitorAnalytics(db.Model):\n    __tablename__ = 'exhibitor_analytics'\n    id = db.Column(db.Integer, primary_key=True)\n    exhibitor_id = db.Column(db.Integer, db.ForeignKey('exhibitors.id'), nullable=False)\n    user_id = db.Column(db.String, db.ForeignKey('users.id'), nullable=True)  # Visitor\n    action_type = db.Column(db.String(50))  # visit, favorite, appointment, chat\n    page_visited = db.Column(db.String(100))  # profile, product, gallery\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=True)\n    session_duration = db.Column(db.Integer, default=0)  # in seconds\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    # Relationships\n    visitor = db.relationship('User', backref='analytics_actions')\n    product = db.relationship('Product', backref='analytics')\n\n# Gallery Advertisements\nclass GalleryAd(db.Model):\n    __tablename__ = 'gallery_ads'\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    image_url = db.Column(db.String, nullable=False)\n    link_url = db.Column(db.String)\n    position = db.Column(db.String(20))  # left, right, back\n    hall = db.Column(db.String(20), default='hall1')\n    is_active = db.Column(db.Boolean, default=True)\n    display_order = db.Column(db.Integer, default=1)\n    created_at = db.Column(db.DateTime, default=datetime.now)","size_bytes":8573},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-dance>=7.1.0\",\n    \"flask-login>=0.6.3\",\n    \"flask-socketio>=5.5.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask-wtf>=1.2.2\",\n    \"oauthlib>=3.3.1\",\n    \"pillow>=11.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pyjwt>=2.10.1\",\n    \"python-dateutil>=2.9.0.post0\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":482},"replit_auth.py":{"content":"import jwt\nimport os\nimport uuid\nfrom functools import wraps\nfrom urllib.parse import urlencode\n\nfrom flask import g, session, redirect, request, render_template, url_for\nfrom flask_dance.consumer import (\n    OAuth2ConsumerBlueprint,\n    oauth_authorized,\n    oauth_error,\n)\nfrom flask_dance.consumer.storage import BaseStorage\nfrom flask_login import LoginManager, login_user, logout_user, current_user\nfrom oauthlib.oauth2.rfc6749.errors import InvalidGrantError\nfrom sqlalchemy.exc import NoResultFound\nfrom werkzeug.local import LocalProxy\n\nfrom app import app, db\nfrom models import OAuth, User\n\nlogin_manager = LoginManager(app)\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(user_id)\n\n\nclass UserSessionStorage(BaseStorage):\n\n    def get(self, blueprint):\n        try:\n            oauth_record = db.session.query(OAuth).filter_by(\n                user_id=current_user.get_id(),\n                browser_session_key=g.browser_session_key,\n                provider=blueprint.name,\n            ).one()\n            return oauth_record.token\n        except NoResultFound:\n            return None\n\n    def set(self, blueprint, token):\n        db.session.query(OAuth).filter_by(\n            user_id=current_user.get_id(),\n            browser_session_key=g.browser_session_key,\n            provider=blueprint.name,\n        ).delete()\n        new_model = OAuth()\n        new_model.user_id = current_user.get_id()\n        new_model.browser_session_key = g.browser_session_key\n        new_model.provider = blueprint.name\n        new_model.token = token\n        db.session.add(new_model)\n        db.session.commit()\n\n    def delete(self, blueprint):\n        db.session.query(OAuth).filter_by(\n            user_id=current_user.get_id(),\n            browser_session_key=g.browser_session_key,\n            provider=blueprint.name).delete()\n        db.session.commit()\n\n\ndef make_replit_blueprint():\n    try:\n        repl_id = os.environ['REPL_ID']\n    except KeyError:\n        raise SystemExit(\"the REPL_ID environment variable must be set\")\n\n    issuer_url = os.environ.get('ISSUER_URL', \"https://replit.com/oidc\")\n\n    replit_bp = OAuth2ConsumerBlueprint(\n        \"replit_auth\",\n        __name__,\n        client_id=repl_id,\n        client_secret=None,\n        base_url=issuer_url,\n        authorization_url_params={\n            \"prompt\": \"login consent\",\n        },\n        token_url=issuer_url + \"/token\",\n        token_url_params={\n            \"auth\": (),\n            \"include_client_id\": True,\n        },\n        auto_refresh_url=issuer_url + \"/token\",\n        auto_refresh_kwargs={\n            \"client_id\": repl_id,\n        },\n        authorization_url=issuer_url + \"/auth\",\n        use_pkce=True,\n        code_challenge_method=\"S256\",\n        scope=[\"openid\", \"profile\", \"email\", \"offline_access\"],\n        storage=UserSessionStorage(),\n    )\n\n    @replit_bp.before_app_request\n    def set_applocal_session():\n        if '_browser_session_key' not in session:\n            session['_browser_session_key'] = uuid.uuid4().hex\n        session.modified = True\n        g.browser_session_key = session['_browser_session_key']\n        g.flask_dance_replit = replit_bp.session\n\n    @replit_bp.route(\"/logout\")\n    def logout():\n        del replit_bp.token\n        logout_user()\n\n        end_session_endpoint = issuer_url + \"/session/end\"\n        encoded_params = urlencode({\n            \"client_id\":\n            repl_id,\n            \"post_logout_redirect_uri\":\n            request.url_root,\n        })\n        logout_url = f\"{end_session_endpoint}?{encoded_params}\"\n\n        return redirect(logout_url)\n\n    @replit_bp.route(\"/error\")\n    def error():\n        return render_template(\"403.html\"), 403\n\n    return replit_bp\n\n\ndef save_user(user_claims):\n    user = User()\n    user.id = user_claims['sub']\n    user.email = user_claims.get('email')\n    user.first_name = user_claims.get('first_name')\n    user.last_name = user_claims.get('last_name')\n    user.profile_image_url = user_claims.get('profile_image_url')\n    merged_user = db.session.merge(user)\n    db.session.commit()\n    return merged_user\n\n\n@oauth_authorized.connect\ndef logged_in(blueprint, token):\n    user_claims = jwt.decode(token['id_token'],\n                             options={\"verify_signature\": False})\n    user = save_user(user_claims)\n    login_user(user)\n    blueprint.token = token\n    next_url = session.pop(\"next_url\", None)\n    if next_url is not None:\n        return redirect(next_url)\n\n\n@oauth_error.connect\ndef handle_error(blueprint, error, error_description=None, error_uri=None):\n    return redirect(url_for('replit_auth.error'))\n\n\ndef require_login(f):\n\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            session[\"next_url\"] = get_next_navigation_url(request)\n            return redirect(url_for('replit_auth.login'))\n\n        expires_in = replit.token.get('expires_in', 0)\n        if expires_in < 0:\n            issuer_url = os.environ.get('ISSUER_URL', \"https://replit.com/oidc\")\n            refresh_token_url = issuer_url + \"/token\"\n            try:\n                token = replit.refresh_token(token_url=refresh_token_url,\n                                             client_id=os.environ['REPL_ID'])\n            except InvalidGrantError:\n                session[\"next_url\"] = get_next_navigation_url(request)\n                return redirect(url_for('replit_auth.login'))\n            replit.token_updater(token)\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n\n\ndef get_next_navigation_url(request):\n    is_navigation_url = request.headers.get(\n        'Sec-Fetch-Mode') == 'navigate' and request.headers.get(\n            'Sec-Fetch-Dest') == 'document'\n    if is_navigation_url:\n        return request.url\n    return request.referrer or request.url\n\n\nreplit = LocalProxy(lambda: g.flask_dance_replit)","size_bytes":5898},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, jsonify, session\nfrom flask_login import current_user, logout_user\nfrom flask_socketio import emit, join_room, leave_room\nfrom app import app, db, socketio\nfrom models import *\nfrom replit_auth import require_login, make_replit_blueprint\nfrom datetime import datetime, timedelta\nimport logging\n\n# Register Replit Auth blueprint\napp.register_blueprint(make_replit_blueprint(), url_prefix=\"/auth\")\n\n# Make session permanent\n@app.before_request\ndef make_session_permanent():\n    session.permanent = True\n\n# Track user analytics\ndef track_user_action(action_type, page_visited=None, exhibitor_id=None, product_id=None):\n    if current_user.is_authenticated and exhibitor_id is not None:\n        analytics = ExhibitorAnalytics()\n        analytics.exhibitor_id = exhibitor_id\n        analytics.user_id = current_user.id\n        analytics.action_type = action_type\n        analytics.page_visited = page_visited\n        analytics.product_id = product_id\n        db.session.add(analytics)\n        db.session.commit()\n\n@app.route('/')\ndef index():\n    \"\"\"Landing page with featured products and exhibition overview\"\"\"\n    if current_user.is_authenticated:\n        # Track homepage visit\n        track_user_action('visit', 'homepage')\n        \n        # Get featured products for homepage\n        featured_products = Product.query.filter_by(is_homepage_featured=True, is_active=True).limit(6).all()\n        \n        # Get gallery halls with exhibitor counts\n        halls = {}\n        for hall in ['hall1', 'hall2', 'hall3']:\n            count = Exhibitor.query.filter_by(gallery_hall=hall, is_active=True).count()\n            halls[hall] = count\n        \n        return render_template('index.html', \n                             featured_products=featured_products,\n                             halls=halls,\n                             user=current_user)\n    else:\n        # Show landing page for non-authenticated users\n        featured_products = Product.query.filter_by(is_homepage_featured=True, is_active=True).limit(6).all()\n        return render_template('landing.html', featured_products=featured_products)\n\n@app.route('/gallery')\n@require_login\ndef gallery():\n    \"\"\"3D Gallery main page\"\"\"\n    track_user_action('visit', 'gallery')\n    \n    # Get all active exhibitors grouped by hall\n    exhibitors_by_hall = {}\n    for hall in ['hall1', 'hall2', 'hall3']:\n        exhibitors = Exhibitor.query.filter_by(gallery_hall=hall, is_active=True).order_by(Exhibitor.ranking).all()\n        exhibitors_by_hall[hall] = exhibitors\n    \n    # Get gallery advertisements\n    ads = GalleryAd.query.filter_by(is_active=True).order_by(GalleryAd.display_order).all()\n    \n    return render_template('gallery.html', \n                         exhibitors_by_hall=exhibitors_by_hall,\n                         ads=ads)\n\n@app.route('/gallery/<hall>')\n@require_login\ndef gallery_hall(hall):\n    \"\"\"Specific gallery hall view\"\"\"\n    track_user_action('visit', f'gallery_{hall}')\n    \n    # Get exhibitors for this hall\n    exhibitors = Exhibitor.query.filter_by(gallery_hall=hall, is_active=True).order_by(Exhibitor.ranking).all()\n    \n    # Get hall-specific advertisements\n    ads = GalleryAd.query.filter_by(hall=hall, is_active=True).order_by(GalleryAd.display_order).all()\n    \n    return render_template('gallery_hall.html', \n                         exhibitors=exhibitors,\n                         hall=hall,\n                         ads=ads)\n\n@app.route('/exhibitor/<int:exhibitor_id>')\n@require_login\ndef exhibitor_profile(exhibitor_id):\n    \"\"\"Exhibitor profile page with products and chat\"\"\"\n    exhibitor = Exhibitor.query.get_or_404(exhibitor_id)\n    \n    # Track profile visit\n    track_user_action('visit', 'exhibitor_profile', exhibitor_id=exhibitor_id)\n    \n    # Get exhibitor's products\n    products = Product.query.filter_by(exhibitor_id=exhibitor_id, is_active=True).all()\n    \n    # Check if user has favorited this exhibitor\n    is_favorited = False\n    if current_user.is_authenticated:\n        favorite = FavoriteExhibitor.query.filter_by(\n            user_id=current_user.id,\n            exhibitor_id=exhibitor_id\n        ).first()\n        is_favorited = favorite is not None\n    \n    # Get available appointment slots (next 30 days)\n    start_date = datetime.now()\n    end_date = start_date + timedelta(days=30)\n    available_slots = AvailableSlot.query.filter(\n        AvailableSlot.exhibitor_id == exhibitor_id,\n        AvailableSlot.start_time >= start_date,\n        AvailableSlot.start_time <= end_date,\n        AvailableSlot.is_available == True\n    ).order_by(AvailableSlot.start_time).all()\n    \n    return render_template('exhibitor_profile.html',\n                         exhibitor=exhibitor,\n                         products=products,\n                         is_favorited=is_favorited,\n                         available_slots=available_slots)\n\n@app.route('/my-box')\n@require_login\ndef my_box():\n    \"\"\"User's saved exhibitors and products\"\"\"\n    # Get user's favorite exhibitors\n    favorite_exhibitors = db.session.query(Exhibitor).join(FavoriteExhibitor).filter(\n        FavoriteExhibitor.user_id == current_user.id\n    ).all()\n    \n    # Get user's favorite products\n    favorite_products = db.session.query(Product).join(FavoriteProduct).filter(\n        FavoriteProduct.user_id == current_user.id\n    ).all()\n    \n    return render_template('my_box.html',\n                         favorite_exhibitors=favorite_exhibitors,\n                         favorite_products=favorite_products)\n\n@app.route('/toggle-favorite-exhibitor/<int:exhibitor_id>', methods=['POST'])\n@require_login\ndef toggle_favorite_exhibitor(exhibitor_id):\n    \"\"\"Add/remove exhibitor from favorites\"\"\"\n    favorite = FavoriteExhibitor.query.filter_by(\n        user_id=current_user.id,\n        exhibitor_id=exhibitor_id\n    ).first()\n    \n    if favorite:\n        # Remove from favorites\n        db.session.delete(favorite)\n        action = 'removed'\n    else:\n        # Add to favorites\n        favorite = FavoriteExhibitor()\n        favorite.user_id = current_user.id\n        favorite.exhibitor_id = exhibitor_id\n        db.session.add(favorite)\n        action = 'added'\n        \n        # Track favorite action\n        track_user_action('favorite', 'exhibitor_profile', exhibitor_id=exhibitor_id)\n    \n    db.session.commit()\n    return jsonify({'status': 'success', 'action': action})\n\n@app.route('/toggle-favorite-product/<int:product_id>', methods=['POST'])\n@require_login\ndef toggle_favorite_product(product_id):\n    \"\"\"Add/remove product from favorites\"\"\"\n    favorite = FavoriteProduct.query.filter_by(\n        user_id=current_user.id,\n        product_id=product_id\n    ).first()\n    \n    if favorite:\n        # Remove from favorites\n        db.session.delete(favorite)\n        action = 'removed'\n    else:\n        # Add to favorites\n        favorite = FavoriteProduct()\n        favorite.user_id = current_user.id\n        favorite.product_id = product_id\n        db.session.add(favorite)\n        action = 'added'\n        \n        # Track favorite action\n        product = Product.query.get(product_id)\n        if product:\n            track_user_action('favorite', 'product', exhibitor_id=product.exhibitor_id, product_id=product_id)\n    \n    db.session.commit()\n    return jsonify({'status': 'success', 'action': action})\n\n@app.route('/book-appointment', methods=['POST'])\n@require_login\ndef book_appointment():\n    \"\"\"Book an appointment with an exhibitor\"\"\"\n    data = request.get_json()\n    slot_id = data.get('slot_id')\n    notes = data.get('notes', '')\n    \n    slot = AvailableSlot.query.get_or_404(slot_id)\n    \n    if not slot.is_available:\n        return jsonify({'status': 'error', 'message': 'هذا الموعد غير متاح'})\n    \n    # Create appointment\n    appointment = Appointment()\n    appointment.user_id = current_user.id\n    appointment.exhibitor_id = slot.exhibitor_id\n    appointment.slot_id = slot_id\n    appointment.appointment_date = slot.start_time\n    appointment.duration_minutes = slot.duration_minutes\n    appointment.notes = notes\n    \n    # Mark slot as unavailable\n    slot.is_available = False\n    \n    db.session.add(appointment)\n    db.session.commit()\n    \n    # Track appointment booking\n    track_user_action('appointment', 'booking', exhibitor_id=slot.exhibitor_id)\n    \n    return jsonify({'status': 'success', 'message': 'تم حجز الموعد بنجاح'})\n\n# Socket.IO events for chat system\n@socketio.on('join_chat')\ndef on_join_chat(data):\n    \"\"\"Join a chat room with an exhibitor\"\"\"\n    if not current_user.is_authenticated:\n        return\n        \n    exhibitor_id = data['exhibitor_id']\n    room = f\"chat_{exhibitor_id}\"\n    join_room(room)\n    \n    # Track chat initiation\n    track_user_action('chat', 'join', exhibitor_id=exhibitor_id)\n    \n    emit('chat_joined', {'room': room})\n\n@socketio.on('send_message')\ndef on_send_message(data):\n    \"\"\"Send a chat message\"\"\"\n    if not current_user.is_authenticated:\n        return\n        \n    exhibitor_id = data['exhibitor_id']\n    message_text = data['message']\n    \n    # Save message to database\n    message = ChatMessage()\n    message.user_id = current_user.id\n    message.exhibitor_id = exhibitor_id\n    message.message = message_text\n    message.is_from_exhibitor = False\n    db.session.add(message)\n    db.session.commit()\n    \n    room = f\"chat_{exhibitor_id}\"\n    emit('new_message', {\n        'message': message_text,\n        'user_name': f\"{current_user.first_name} {current_user.last_name}\",\n        'timestamp': message.created_at.strftime('%H:%M'),\n        'is_from_exhibitor': False\n    }, to=room)\n\n# Admin and Exhibitor Routes (basic implementations)\n@app.route('/dashboard')\n@require_login\ndef dashboard():\n    \"\"\"User dashboard - redirects based on role\"\"\"\n    if current_user.role == 'admin':\n        return redirect(url_for('admin_dashboard'))\n    elif current_user.role == 'exhibitor':\n        return redirect(url_for('exhibitor_dashboard'))\n    else:\n        return redirect(url_for('my_box'))\n\n@app.route('/admin')\n@require_login\ndef admin_dashboard():\n    \"\"\"Admin dashboard\"\"\"\n    if current_user.role != 'admin':\n        flash('غير مصرح لك بالوصول لهذه الصفحة')\n        return redirect(url_for('index'))\n    \n    # Get statistics\n    total_users = User.query.count()\n    total_exhibitors = Exhibitor.query.count()\n    total_products = Product.query.count()\n    \n    return render_template('admin_dashboard.html',\n                         total_users=total_users,\n                         total_exhibitors=total_exhibitors,\n                         total_products=total_products)\n\n@app.route('/exhibitor-dashboard')\n@require_login\ndef exhibitor_dashboard():\n    \"\"\"Exhibitor dashboard\"\"\"\n    if current_user.role != 'exhibitor':\n        flash('غير مصرح لك بالوصول لهذه الصفحة')\n        return redirect(url_for('index'))\n    \n    exhibitor = Exhibitor.query.filter_by(user_id=current_user.id).first()\n    if not exhibitor:\n        flash('لم يتم العثور على ملف العارض')\n        return redirect(url_for('index'))\n    \n    # Get exhibitor's analytics\n    total_visits = ExhibitorAnalytics.query.filter_by(\n        exhibitor_id=exhibitor.id,\n        action_type='visit'\n    ).count()\n    \n    total_favorites = FavoriteExhibitor.query.filter_by(exhibitor_id=exhibitor.id).count()\n    total_appointments = Appointment.query.filter_by(exhibitor_id=exhibitor.id).count()\n    \n    return render_template('exhibitor_dashboard.html',\n                         exhibitor=exhibitor,\n                         total_visits=total_visits,\n                         total_favorites=total_favorites,\n                         total_appointments=total_appointments)\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('404.html'), 404\n\n@app.errorhandler(403)\ndef forbidden(error):\n    return render_template('403.html'), 403","size_bytes":12014},"static/js/main.js":{"content":"// Food Exhibition Platform - Main JavaScript\n// Socket.IO initialization and client-side functionality\n\nlet socket;\nlet currentChatExhibitorId = null;\nlet calendar = null;\n\n// Initialize Socket.IO when page loads\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeSocketIO();\n    initializeCalendar();\n    setupEventHandlers();\n});\n\n// Socket.IO Functions\nfunction initializeSocketIO() {\n    socket = io();\n    \n    // Handle connection events\n    socket.on('connect', function() {\n        console.log('Connected to server');\n    });\n    \n    socket.on('disconnect', function() {\n        console.log('Disconnected from server');\n    });\n    \n    // Handle chat messages\n    socket.on('chat_message', function(data) {\n        displayChatMessage(data);\n    });\n    \n    socket.on('user_joined_chat', function(data) {\n        console.log('User joined chat:', data.username);\n    });\n    \n    socket.on('user_left_chat', function(data) {\n        console.log('User left chat:', data.username);\n    });\n}\n\n// Chat Functions\nfunction showChat(exhibitorId) {\n    currentChatExhibitorId = exhibitorId;\n    const chatContainer = document.querySelector('.chat-container');\n    if (chatContainer) {\n        chatContainer.style.display = 'block';\n        joinChatRoom(exhibitorId);\n        loadChatHistory(exhibitorId);\n    }\n}\n\nfunction hideChat() {\n    const chatContainer = document.querySelector('.chat-container');\n    if (chatContainer) {\n        chatContainer.style.display = 'none';\n        if (currentChatExhibitorId) {\n            leaveChatRoom(currentChatExhibitorId);\n            currentChatExhibitorId = null;\n        }\n    }\n}\n\nfunction joinChatRoom(exhibitorId) {\n    socket.emit('join_chat', {\n        exhibitor_id: exhibitorId\n    });\n}\n\nfunction leaveChatRoom(exhibitorId) {\n    socket.emit('leave_chat', {\n        exhibitor_id: exhibitorId\n    });\n}\n\nfunction sendChatMessage() {\n    const messageInput = document.getElementById('chat-message-input');\n    const message = messageInput.value.trim();\n    \n    if (message && currentChatExhibitorId) {\n        socket.emit('send_message', {\n            exhibitor_id: currentChatExhibitorId,\n            message: message\n        });\n        \n        messageInput.value = '';\n    }\n}\n\nfunction displayChatMessage(data) {\n    const chatBody = document.querySelector('.chat-body');\n    if (!chatBody) return;\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = `message ${data.sender_type}`;\n    \n    const timestamp = new Date(data.timestamp).toLocaleTimeString('ar-EG', {\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n    \n    messageElement.innerHTML = `\n        <div class=\"message-content\">${data.message}</div>\n        <div class=\"message-time\">${timestamp}</div>\n    `;\n    \n    chatBody.appendChild(messageElement);\n    chatBody.scrollTop = chatBody.scrollHeight;\n}\n\nfunction loadChatHistory(exhibitorId) {\n    // Clear current chat\n    const chatBody = document.querySelector('.chat-body');\n    if (chatBody) {\n        chatBody.innerHTML = '';\n    }\n    \n    // Load chat history via AJAX\n    fetch(`/api/chat-history/${exhibitorId}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                data.messages.forEach(message => {\n                    displayChatMessage(message);\n                });\n            }\n        })\n        .catch(error => {\n            console.error('Error loading chat history:', error);\n        });\n}\n\n// Favorite Functions\nfunction toggleFavoriteExhibitor(exhibitorId) {\n    const favoriteBtn = document.getElementById('favorite-btn');\n    \n    fetch(`/toggle-favorite-exhibitor/${exhibitorId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            updateFavoriteButton(favoriteBtn, data.action);\n            showNotification(\n                data.action === 'added' ? 'تم إضافة العارض للمفضلة' : 'تم إزالة العارض من المفضلة',\n                'success'\n            );\n        } else {\n            showNotification('حدث خطأ في العملية', 'error');\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        showNotification('حدث خطأ في الاتصال', 'error');\n    });\n}\n\nfunction toggleFavoriteProduct(productId) {\n    fetch(`/toggle-favorite-product/${productId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            // Find the product favorite button\n            const productCard = document.querySelector(`[data-product-id=\"${productId}\"]`);\n            if (productCard) {\n                const favoriteBtn = productCard.querySelector('.favorite-btn');\n                if (favoriteBtn) {\n                    updateFavoriteButton(favoriteBtn, data.action);\n                }\n            }\n            \n            showNotification(\n                data.action === 'added' ? 'تم إضافة المنتج للمفضلة' : 'تم إزالة المنتج من المفضلة',\n                'success'\n            );\n        } else {\n            showNotification('حدث خطأ في العملية', 'error');\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        showNotification('حدث خطأ في الاتصال', 'error');\n    });\n}\n\nfunction removeFavoriteExhibitor(exhibitorId) {\n    if (confirm('هل أنت متأكد من إزالة هذا العارض من المفضلة؟')) {\n        toggleFavoriteExhibitor(exhibitorId);\n        \n        // Remove the card from the page after a delay\n        setTimeout(() => {\n            const exhibitorCard = document.querySelector(`[data-exhibitor-id=\"${exhibitorId}\"]`);\n            if (exhibitorCard) {\n                exhibitorCard.remove();\n            }\n        }, 1000);\n    }\n}\n\nfunction removeFavoriteProduct(productId) {\n    if (confirm('هل أنت متأكد من إزالة هذا المنتج من المفضلة؟')) {\n        toggleFavoriteProduct(productId);\n        \n        // Remove the card from the page after a delay\n        setTimeout(() => {\n            const productCard = document.querySelector(`[data-product-id=\"${productId}\"]`);\n            if (productCard) {\n                productCard.remove();\n            }\n        }, 1000);\n    }\n}\n\nfunction updateFavoriteButton(button, action) {\n    if (!button) return;\n    \n    if (action === 'added') {\n        button.classList.add('favorited');\n        button.innerHTML = '<i class=\"fas fa-heart fa-2x\"></i><div class=\"mt-2\">مُضاف للمفضلة</div>';\n    } else {\n        button.classList.remove('favorited');\n        button.innerHTML = '<i class=\"fas fa-heart fa-2x\"></i><div class=\"mt-2\">إضافة للمفضلة</div>';\n    }\n}\n\n// Navigation Functions\nfunction visitExhibitor(exhibitorId) {\n    window.location.href = `/exhibitor/${exhibitorId}`;\n}\n\nfunction viewProduct(productId) {\n    // Show product modal or navigate to product page\n    showProductModal(productId);\n}\n\nfunction showProductModal(productId) {\n    // Create and show product modal\n    fetch(`/api/product/${productId}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.status === 'success') {\n                displayProductModal(data.product);\n            }\n        })\n        .catch(error => {\n            console.error('Error loading product:', error);\n            showNotification('حدث خطأ في تحميل المنتج', 'error');\n        });\n}\n\nfunction displayProductModal(product) {\n    const modalHtml = `\n        <div class=\"modal fade\" id=\"productModal\" tabindex=\"-1\">\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${product.name}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                ${product.image_url ? \n                                    `<img src=\"${product.image_url}\" class=\"img-fluid rounded\" alt=\"${product.name}\">` :\n                                    '<div class=\"bg-light d-flex align-items-center justify-content-center\" style=\"height: 300px;\"><i class=\"fas fa-utensils fa-4x text-muted\"></i></div>'\n                                }\n                            </div>\n                            <div class=\"col-md-6\">\n                                <h4>${product.name}</h4>\n                                <p class=\"text-muted\">${product.description}</p>\n                                <h5 class=\"text-primary\">${product.price} ${product.currency}</h5>\n                                <div class=\"mt-3\">\n                                    <button onclick=\"toggleFavoriteProduct(${product.id})\" class=\"btn btn-outline-danger\">\n                                        <i class=\"fas fa-heart\"></i> إضافة للمفضلة\n                                    </button>\n                                    <button onclick=\"visitExhibitor(${product.exhibitor_id})\" class=\"btn btn-primary ms-2\">\n                                        زيارة العارض\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Remove existing modal\n    const existingModal = document.getElementById('productModal');\n    if (existingModal) {\n        existingModal.remove();\n    }\n    \n    // Add modal to page\n    document.body.insertAdjacentHTML('beforeend', modalHtml);\n    \n    // Show modal\n    const modal = new bootstrap.Modal(document.getElementById('productModal'));\n    modal.show();\n}\n\n// Calendar Functions\nfunction initializeCalendar() {\n    const calendarEl = document.getElementById('appointment-calendar');\n    if (!calendarEl) return;\n    \n    calendar = new FullCalendar.Calendar(calendarEl, {\n        initialView: 'dayGridMonth',\n        locale: 'ar',\n        direction: 'rtl',\n        headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        },\n        events: '/api/available-slots/' + getExhibitorIdFromUrl(),\n        selectable: true,\n        selectMirror: true,\n        select: function(info) {\n            showBookingModal(info);\n        },\n        eventClick: function(info) {\n            showSlotDetails(info.event);\n        }\n    });\n    \n    calendar.render();\n}\n\nfunction getExhibitorIdFromUrl() {\n    const pathParts = window.location.pathname.split('/');\n    return pathParts[pathParts.length - 1];\n}\n\nfunction showBookingModal(info) {\n    const modalHtml = `\n        <div class=\"modal fade\" id=\"bookingModal\" tabindex=\"-1\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">حجز موعد</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form id=\"booking-form\">\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">التاريخ</label>\n                                <input type=\"text\" class=\"form-control\" value=\"${info.startStr}\" readonly>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">الوقت</label>\n                                <select class=\"form-select\" id=\"time-slot\" required>\n                                    <option value=\"\">اختر الوقت المناسب</option>\n                                </select>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">ملاحظات (اختياري)</label>\n                                <textarea class=\"form-control\" id=\"booking-notes\" rows=\"3\"></textarea>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">إلغاء</button>\n                        <button type=\"button\" class=\"btn btn-primary\" onclick=\"confirmBooking()\">تأكيد الحجز</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Remove existing modal\n    const existingModal = document.getElementById('bookingModal');\n    if (existingModal) {\n        existingModal.remove();\n    }\n    \n    // Add modal to page\n    document.body.insertAdjacentHTML('beforeend', modalHtml);\n    \n    // Load available time slots for the selected date\n    loadAvailableTimeSlots(info.startStr);\n    \n    // Show modal\n    const modal = new bootstrap.Modal(document.getElementById('bookingModal'));\n    modal.show();\n}\n\nfunction loadAvailableTimeSlots(date) {\n    const exhibitorId = getExhibitorIdFromUrl();\n    \n    fetch(`/api/available-slots/${exhibitorId}?date=${date}`)\n        .then(response => response.json())\n        .then(data => {\n            const timeSlotSelect = document.getElementById('time-slot');\n            timeSlotSelect.innerHTML = '<option value=\"\">اختر الوقت المناسب</option>';\n            \n            if (data.status === 'success' && data.slots.length > 0) {\n                data.slots.forEach(slot => {\n                    const option = document.createElement('option');\n                    option.value = slot.id;\n                    option.textContent = `${slot.start_time} - ${slot.end_time} (${slot.duration_minutes} دقيقة)`;\n                    timeSlotSelect.appendChild(option);\n                });\n            } else {\n                const option = document.createElement('option');\n                option.value = '';\n                option.textContent = 'لا توجد مواعيد متاحة في هذا التاريخ';\n                timeSlotSelect.appendChild(option);\n            }\n        })\n        .catch(error => {\n            console.error('Error loading time slots:', error);\n            showNotification('حدث خطأ في تحميل المواعيد المتاحة', 'error');\n        });\n}\n\nfunction confirmBooking() {\n    const slotId = document.getElementById('time-slot').value;\n    const notes = document.getElementById('booking-notes').value;\n    \n    if (!slotId) {\n        showNotification('يرجى اختيار الوقت المناسب', 'warning');\n        return;\n    }\n    \n    fetch('/book-appointment', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            slot_id: slotId,\n            notes: notes\n        })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showNotification(data.message, 'success');\n            \n            // Close modal\n            const modal = bootstrap.Modal.getInstance(document.getElementById('bookingModal'));\n            modal.hide();\n            \n            // Refresh calendar\n            if (calendar) {\n                calendar.refetchEvents();\n            }\n        } else {\n            showNotification(data.message, 'error');\n        }\n    })\n    .catch(error => {\n        console.error('Error booking appointment:', error);\n        showNotification('حدث خطأ في حجز الموعد', 'error');\n    });\n}\n\n// Utility Functions\nfunction showNotification(message, type = 'info') {\n    const alertClass = type === 'success' ? 'alert-success' : \n                     type === 'error' ? 'alert-danger' : \n                     type === 'warning' ? 'alert-warning' : 'alert-info';\n    \n    const alertHtml = `\n        <div class=\"alert ${alertClass} alert-dismissible fade show position-fixed\" \n             style=\"top: 20px; right: 20px; z-index: 9999; min-width: 300px;\" role=\"alert\">\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        </div>\n    `;\n    \n    document.body.insertAdjacentHTML('beforeend', alertHtml);\n    \n    // Auto-dismiss after 5 seconds\n    setTimeout(() => {\n        const alerts = document.querySelectorAll('.alert');\n        alerts.forEach(alert => {\n            if (alert.textContent.includes(message)) {\n                const alertInstance = bootstrap.Alert.getOrCreateInstance(alert);\n                alertInstance.close();\n            }\n        });\n    }, 5000);\n}\n\nfunction setupEventHandlers() {\n    // Chat message input handler\n    const chatInput = document.getElementById('chat-message-input');\n    if (chatInput) {\n        chatInput.addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                sendChatMessage();\n            }\n        });\n    }\n    \n    // Chat header toggle\n    const chatHeader = document.querySelector('.chat-header');\n    if (chatHeader) {\n        chatHeader.addEventListener('click', function() {\n            const chatContainer = document.querySelector('.chat-container');\n            if (chatContainer.style.display === 'none' || !chatContainer.style.display) {\n                showChat(currentChatExhibitorId || getExhibitorIdFromUrl());\n            } else {\n                hideChat();\n            }\n        });\n    }\n}\n\n// Export functions for global access\nwindow.toggleFavoriteExhibitor = toggleFavoriteExhibitor;\nwindow.toggleFavoriteProduct = toggleFavoriteProduct;\nwindow.visitExhibitor = visitExhibitor;\nwindow.viewProduct = viewProduct;\nwindow.removeFavoriteExhibitor = removeFavoriteExhibitor;\nwindow.removeFavoriteProduct = removeFavoriteProduct;\nwindow.showChat = showChat;\nwindow.hideChat = hideChat;\nwindow.sendChatMessage = sendChatMessage;","size_bytes":18464}},"version":1}